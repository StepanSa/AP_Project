openapi: 3.0.3

info:
  title: Ticket transaction - OpenAPI 3.0
  description: Service for ticket transactions
  version: 1.0.11

servers:
  - url: url

tags:
  - name: ticket
    description: Everything about Tickets
  - name: transaction
    description: Everything about transaction 
  - name: user
    description: Everything about user
    
paths:
  /ticket:
    post:
      tags:
        - ticket
      summary: Add a new ticket
      description: Add a new ticket
      operationId: addTicket
      requestBody:
        description: Create a new ticket
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTicket'
          application/xml:
            schema:
              $ref: '#/components/schemas/CreateTicket'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateTicket'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Ticket'
        '401':
          description: Admin has to be logged in
        '405':
          description: Invalid input
      security:
        - tickettransaction_auth:
            - admin

  /ticket/{TicketId}:
    get:
      tags:
        - ticket
      summary: Find ticket by ID
      description: Returns a single ticket
      operationId: getTicketById
      parameters:
        - name: TicketId
          in: path
          description: ID of ticket to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: Invalid ID supplied
        '401':
          description: User has to be logged in
      security:
        - tickettransaction_auth: []
    put:
      tags:
        - ticket
      summary: Updates a ticket with form data
      description: Updates a ticket with form data
      operationId: updateTicketWithForm
      parameters:
        - name: TicketId
          in: path
          description: ID of ticket that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of ticket that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of ticket that needs to be updated
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTicket'
            application/xml:
              schema:
                $ref: '#/components/schemas/UpdateTicket'
        '400':
          description: Invalid id supplied
        '401':
          description: Admin has to be logged in
      security:
        - tickettransaction_auth:
          - admin
    delete:
      tags:
        - ticket
      summary: Deletes a ticket
      description: delete a ticket
      operationId: deleteTicket
      parameters:
        - name: TicketId
          in: path
          description: Ticket id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ticket value
        '401':
          description: Admin has to be logged in
      security:
        - tickettransaction_auth:
          - admin
          
  /ticket/inventory/{status}:
    get:
      tags:
        - ticket
      summary: Returns ticket inventories by status
      description: Returns a list of inventories by status
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
        '401':
          description: admin has to be logged in
      security:
        - tickettransaction_auth: 
          - admin


  /transaction/order:
    post:
      tags:
        - transaction
      summary: Place an order for a ticket
      description: Place a new order in the transaction
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceOrder'
          application/xml:
            schema:
              $ref: '#/components/schemas/PlaceOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PlaceOrder'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '401':
          description: User has to be logged in
      security:
        - tickettransaction_auth: []

  /transaction/order/{TransactionId}:
    put:
      tags:
        - transaction
      summary: Cancel transaction order by ID
      description: Cancel transaction order by ID
      operationId: cancelOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '401':
          description: user has to be logged in
        '404':
          description: Order not found
      security:
        - tickettransaction_auth:
            - user
  /transaction/order/{orderId}:
    get:
      tags:
        - transaction
      summary: Find transaction order by ID
      description: Find transaction order by ID
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '401':
          description: user has to be logged in
      security:
        - tickettransaction_auth:
          - admin
    delete:
      tags:
        - transaction
      summary: Delete order by ID
      description: Delete order by ID
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '401':
          description: User has to be logged in
        '404':
          description: Order not found
      security:
        - tickettransaction_auth:
          - admin
          
  /transaction/ordersby/{userId}:
    get:
      tags:
        - transaction
      summary: Gets all orders made by certain user
      description: Gets all oredrs by certain user
      operationId: getTransactionSendAdmin
      parameters:
        - name: username
          in: path
          description: 'The username whose orders should be recieved'   
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Order'
        '401':
          description: User must be logged in admin
        '400':
          description: Invalid id supplied
      security: 
        - tickettransaction_auth: 
          - admin
          - user
          
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: Create user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
          application/xml:
            schema:
              $ref: '#/components/schemas/CreateUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Username already taken
          
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username/password supplied
          
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: 'This can only be done if user is logged in'
      operationId: logoutUser
      parameters: []
      responses:
        '200':
          description: successful operation
        '401':
          description: user has to be logged in
      security:
        - tickettransaction_auth: []
        
  /user/self:
    get:
      tags:
        - user
      summary: Gets full information
      description: Returns full information only about logged in user.
      operationId: getUserSelf
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: User must be logged in
      security: 
        - tickettransaction_auth: []
    put:
      tags:
        - user
      summary: Updates user
      description: Updates information only for logged-in user.
      operationId: updateUserSelf
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: firstName
          in: query
          description: ''
          required: false
          schema:
            type: string
        - name: lastName
          in: query
          description: ''
          required: false
          schema:
            type: string
        - name: phone
          in: query
          description: ''
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: ''
          required: false
          schema:
            type: string
      requestBody:
        description: Update your user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
          application/xml:
            schema:
              $ref: '#/components/schemas/UpdateUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Entered invalid data
        '401':
          description: User must be logged in
      security:
        - tickettransaction_auth: []
    delete:
      tags:
        - user
      summary: Deletes user
      description: The user won't be deleted, it's userStatus will be changed to 1.
      operationId: deleteUserSelf
      responses:
        '200':
          description: successful operation
        '401':
          description: User must be logged in
      security:
        - tickettransaction_auth: []
        
  /user/{id}:
    get:
      tags:
        - user
      summary: Get user by user id
      description: 'This can only be done by logged in admin'
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: 'The id that needs to be fetched.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUser'          
            application/xml:
              schema:
                $ref: '#/components/schemas/GetUser'
        '400':
          description: Invalid id supplied
        '401':
          description: User must be logged in admin
      security:
        - tickettransaction_auth:
          - admin
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in admin.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
        '401':
          description: User must be logged in admin
      security:
        - tickettransaction_auth:
          - admin
          
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        ticketId:
          type: integer
          format: int64
          example: 191
        userId:
          type: integer
          format: int64
          example: 85495
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - denied
          example: approved
      xml:
        name: order
        
    PlaceOrder:
      required:
        - ticketId
        - userId
      type: object
      properties:
        ticketId:
          type: integer
          format: int64
          example: 191
        userId:
          type: integer
          format: int64
          example: 85495
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - denied
          example: placed
      xml:
        name: order
        
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: Beb
        lastName:
          type: string
          example: Bems
        email:
          type: string
          example: beb@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '+380098765432'
        birthDate:
          type: string
          format: date
          example: '2002-11-11'
        userStatus:
          type: integer
          format: int32
          enum:
            - 0
            - 1
          example: 1
      xml:
        name: user
        
    CreateUser:
      required:
        - username
        - firstName
        - LastName
        - email
        - password
      type: object
      properties:
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: Beb
        lastName:
          type: string
          example: Bems
        email:
          type: string
          example: beb@email.com
        password:
          type: string
          example: 'hello2world'
        phone:
          type: string
          example: '+380979797979'
        birthDate: 
          type: string
          format: date
          example: '2022-10-02'
      xml:
        name: createuser
        
    UpdateUser:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: 'hello2world'
        phone:
          type: string
          example: '+380979797979'
      xml:
        name: usertoupdate
        
    GetUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        phone:
          type: string
          example: '+380979797979'
        birthDate: 
          type: string
          format: date
          example: '2022-10-22'
        userStatus:
          type: integer
          format: int32
          enum:
            - 0
            - 1
          example: 0
      xml:
        name: getuser
        
    Ticket:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: 123A
        status:
          type: string
          description: ticket status
          enum:
            - free
            - booked
            - sold
        price:
          type: integer
          format: int32
          example: 20
      xml:
        name: ticket
    UpdateTicket:
      type: object
      properties:
        name:
          type: string
          example: 123A
        status:
          type: string
          description: ticket status
          enum:
            - free
            - booked
            - sold
        price:
          type: integer
          format: int32
          example: 20
      xml:
        name: tickettoupdate
    CreateTicket:
      type: object
      properties:
        name:
          type: string
          example: 123A
        status:
          type: string
          description: ticket status
          enum:
            - free
            - booked
            - sold
        price:
          type: integer
          format: int32
          example: 20
      xml:
        name: ticket

  securitySchemes:
    tickettransaction_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: url
          scopes:
            admin: Gives access to admin operations
